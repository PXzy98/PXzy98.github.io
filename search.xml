<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Material-UI</title>
      <link href="/2023/08/09/Material-UI/"/>
      <url>/2023/08/09/Material-UI/</url>
      
        <content type="html"><![CDATA[<h2 id="Reminders-for-Myself"><a href="#Reminders-for-Myself" class="headerlink" title="Reminders for Myself"></a>Reminders for Myself</h2><hr><h3 id="Responsive-meta-tag"><a href="#Responsive-meta-tag" class="headerlink" title="Responsive meta tag"></a>Responsive meta tag</h3><hr><p>Material UI is a mobile-first component library—we write code for mobile devices first, and then scale up the components as necessary using CSS media queries.</p><p>To ensure proper rendering and touch zooming for all devices, add the responsive viewport meta tag to your  element:</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>initial-scale=1, width=device-width<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span></code></pre><h3 id="Two-ways-of-implementing-styled-MUI-components-in-code"><a href="#Two-ways-of-implementing-styled-MUI-components-in-code" class="headerlink" title="Two ways of implementing styled MUI components in code"></a>Two ways of implementing styled MUI components in code</h3><hr><p>First</p><pre class="language-Js" data-language="Js"><code class="language-Js">import React from 'react';import { makeStyles } from '@material-ui/core/styles';import Button from '@material-ui/core/Button';const Style = makeStyles({   root: {    background: '#FE6B8B',    border: 0,    borderRadius: 3,    color: 'red',    height: 52,    padding: '30px',  },});export default functio testButton() {  const classes = Style();   return &lt;Button className={classes.root}&gt;testButton&lt;/Button&gt;;}</code></pre><p>Second</p><pre class="language-Js" data-language="Js"><code class="language-Js">import React from 'react';import { styled } from '@material-ui/core/styles';import Button from '@material-ui/core/Button';const MyButton = styled(Button)({  background: '#FE6B8B',  border: 0,  borderRadius: 3,  color: 'Red',  height: 52,  padding: '30px',});export default function StyledComponents() {  return &lt;MyButton&gt;testButton&lt;/MyButton&gt;;}</code></pre>]]></content>
      
      
      <categories>
          
          <category> Web Development </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
            <tag> MUI </tag>
            
            <tag> Js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Naming_Rules</title>
      <link href="/2023/08/08/Naming-Rules/"/>
      <url>/2023/08/08/Naming-Rules/</url>
      
        <content type="html"><![CDATA[<h2 id="Basic-rules"><a href="#Basic-rules" class="headerlink" title="Basic rules"></a>Basic rules</h2><p>By learning the React, i would like to review some rules for naming objects during coding and make some records.</p><p>Basically, the name should be <em>Descriptive</em> and <em>meaningful</em>. The name we use should avoid single letter and some capitals for words. Obviously, we should take care of avoiding the name which occupied by programming languege or system. Use nouns for variable names and use Verbs for Functions.</p><p>I would list some popular format and related languages below to memorize.</p><h3 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h3><p>Classes: PascalCase (e.g., MyClass)<br>Variables and Methods: camelCase (e.g., myVariable)<br>Constants: ALL_CAPS_SNAKE_CASE (e.g., MAX_VALUE)</p><h3 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h3><p>Classes: PascalCase (e.g., MyClass)<br>Variables and Functions: snake_case (e.g., my_variable)<br>Constants: ALL_CAPS_SNAKE_CASE (e.g., MAX_VALUE)</p><h3 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h3><p>Classes: PascalCase (e.g., MyClass)<br>Variables and Functions: camelCase (e.g., myVariable)</p><h3 id="C"><a href="#C" class="headerlink" title="C#"></a>C#</h3><p>Classes: PascalCase (e.g., MyClass)<br>Variables and Methods: PascalCase (e.g., myVariable)<br>Constants: ALL_CAPS_SNAKE_CASE (e.g., MAX_VALUE)</p><h3 id="C-1"><a href="#C-1" class="headerlink" title="C++"></a>C++</h3><p>Classes: PascalCase (e.g., MyClass)<br>Variables and Functions: camelCase </p>]]></content>
      
      
      <categories>
          
          <category> Programming techniques </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Programming techniques </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React_1</title>
      <link href="/2023/08/08/React-1/"/>
      <url>/2023/08/08/React-1/</url>
      
        <content type="html"><![CDATA[<p>It is really suprising to use such a “madular” structure to deal with web developing. And i am also planning to try React Native after getting familiar with React. As the there are so many well-designed ui components to use for React, and i believe i will help me to improve my Front End design significantly.</p><p>React brings us a significant advantage that we can update components asynchronously instead of refreshing or reloading the page.</p><h3 id="Hooks"><a href="#Hooks" class="headerlink" title="Hooks"></a>Hooks</h3><hr><table><thead><tr><th>Name</th><th>Usage</th></tr></thead><tbody><tr><td>useState</td><td>initialization and set state</td></tr><tr><td>useEffect</td><td>monitoring the changes for the values for “usestate”</td></tr><tr><td>useContext</td><td>Hook to share state between deeply nested components</td></tr></tbody></table><h3 id="Make-Customized-Hooks"><a href="#Make-Customized-Hooks" class="headerlink" title="Make Customized Hooks"></a>Make Customized Hooks</h3><hr><p>For Example useFectch.js</p><pre class="language-Js" data-language="Js"><code class="language-Js">import { useState, useEffect } from "react";const useFetch = (url) =&gt; {  const [data, setData] = useState(null);  useEffect(() =&gt; {    fetch(url)      .then((res) =&gt; res.json())      .then((data) =&gt; setData(data));  }, [url]);  return [data];};export default useFetch;</code></pre>]]></content>
      
      
      <categories>
          
          <category> Web Development </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
            <tag> Js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>EFI Edit / Boot Fix With Windows</title>
      <link href="/2023/07/20/EFI-Edit-Boot-Fix/"/>
      <url>/2023/07/20/EFI-Edit-Boot-Fix/</url>
      
        <content type="html"><![CDATA[<h2 id="EFI-Partition-Recovery"><a href="#EFI-Partition-Recovery" class="headerlink" title="EFI Partition Recovery"></a>EFI Partition Recovery</h2><hr><p>As I was trying to reinstall the windows system to recover some problems with hyperv environment, the “correct” efi partition was accidentally removed and the computer was not able to boot into new installed system.</p><h3 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h3><hr><p>For windows, if you can still access to the windows boot loader but not the right one. You can get into Windows Recovery Environment by booting the machine while keep pressing F11. (Or hold shift while restarting the system which is not suitable for this case) Then you can select “Troubleshoot” at the menu with advanced option at the submenu. </p><p>Firstly, you may want to try a automatic repair. There would be a “Start up setting” over there and follow the instructions to repair it. </p><p>If it doesnt work, you may need some command line work to bring your pc back. Follow the same instruction with previous steps until you reaches the “Advance Options”. This time selects “Command Prompt” instead. </p><pre class="language-batch" data-language="batch"><code class="language-batch"><span class="token command"><span class="token keyword">diskpart</span></span><span class="token command"><span class="token keyword">list</span> disk</span></code></pre><p><img src="/2023/07/20/EFI-Edit-Boot-Fix/list_disk.png" alt="list_of_disks"><br>The result would be similar to this pic above. For me, Disk 0 is the system drive, you need to determine which one is your’s while you are repairing.</p><pre class="language-batch" data-language="batch"><code class="language-batch"><span class="token command"><span class="token keyword">select</span> disk <span class="token number">0</span></span><span class="token command"><span class="token keyword">list</span> vol</span></code></pre><p><img src="/2023/07/20/EFI-Edit-Boot-Fix/list_vol.webp" alt="list_of_Volumes"></p><p>Things will be different here.</p><p>If you can find a partition with the FAT32 filesystem and a small size, like Volume 5 here, it should be an EFI partition.</p><pre class="language-batch" data-language="batch"><code class="language-batch"><span class="token command"><span class="token keyword">select</span> vol <span class="token number">5</span></span><span class="token command"><span class="token keyword">Assign</span> letter=X:</span><span class="token command"><span class="token keyword">exit</span></span></code></pre><p>If you can’t, select the volume with your system, and do following instructions.</p><pre class="language-batch" data-language="batch"><code class="language-batch"><span class="token command"><span class="token keyword">select</span> vol </span><span class="token command"><span class="token keyword">shrink</span> desired=<span class="token number">500</span></span></code></pre><p>Right now, the space for new EFI partition is reserved. And we need to acutally create a new one now.</p><pre class="language-batch" data-language="batch"><code class="language-batch"><span class="token command"><span class="token keyword">select</span> disk <span class="token number">0</span></span><span class="token command"><span class="token keyword">create</span> partition primary size=<span class="token number">500</span></span><span class="token command"><span class="token keyword">Assign</span> letter=X:</span><span class="token command"><span class="token keyword">exit</span></span></code></pre><p><em>For both situation, you can choose any other letter which are not using in your system to replace X here.</em></p><pre class="language-batch" data-language="batch"><code class="language-batch"><span class="token command"><span class="token keyword">X</span>:</span><span class="token command"><span class="token keyword">bcdboot</span> C:\windows <span class="token parameter attr-name">/s</span> X: <span class="token parameter attr-name">/f</span> UEFI</span><span class="token command"><span class="token keyword">exit</span></span></code></pre><p>You can try restarting your PC, and the problem should be solved.</p><p>If the drive labeled ‘X’ still exists, you can access “Disk Management” by searching for it. Once it is opened, right-click on the ‘X’ partition, select “Change Drive Letter and Paths,” and then click on “Remove.” That should take care of it.</p><h3 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h3><hr><p>If you got a linux system installed on the machine as well.</p><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> os-prober$ <span class="token function">sudo</span> <span class="token function">update-grub</span></code></pre><p>This may solve the problem by adding windows to Linux boot system.</p><p>If it doesnt work, you may try following.</p><p>Firstly, check which partition Windows locates</p><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> blkid /dev/sda1</code></pre><p>Replace it with sda1 here. It would show UUID over here after it finished.</p><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">nano</span> /etc/grub.d/40_custom</code></pre><p>Add following to the end of the file and save it.</p><pre class="language-none"><code class="language-none">menuentry "Windows 10" --class windows --class os {   insmod ntfs   search --no-floppy --set=root --fs-uuid $your_uuid_here$   ntldr /bootmgr}</code></pre><p>Update the grub and restart, problem should be solved</p><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">update-grub</span>$ <span class="token function">sudo</span> <span class="token function">reboot</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Troubleshoot </category>
          
          <category> system troubleshoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PC Troubleshoot </tag>
            
            <tag> Windows </tag>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
